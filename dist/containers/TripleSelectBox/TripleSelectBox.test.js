"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

describe('<TripleSelectBox />', function () {
  afterEach(_react2.cleanup);
  it('should render the options', function () {
    var props = {
      options: {
        left: ['Courgette', 'Date', 'Grape', 'Garlic', 'Fig', 'Endive', 'Fennel'],
        center: ['Mango', 'Lemon', 'Leek', 'Guava', 'Mushroom', 'Melon'],
        right: ['Apple', 'Orange', 'Apricot', 'Avocado', 'Beetroot', 'Broccoli', 'Carrot', 'Clementine']
      },
      onChange: function onChange() {}
    };

    var _render = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render.container;

    var selects = container.querySelectorAll('select');
    expect(selects).toHaveLength(3);
    expect(Array.from(selects[0].children).every(function (child) {
      return props.options.left.includes(child.value);
    })).toBeTruthy();
    expect(Array.from(selects[1].children).every(function (child) {
      return props.options.center.includes(child.value);
    })).toBeTruthy();
    expect(Array.from(selects[2].children).every(function (child) {
      return props.options.right.includes(child.value);
    })).toBeTruthy();
  });
  it('should render the box titles', function () {
    var props = {
      options: {
        left: ['Courgette', 'Date', 'Grape', 'Garlic', 'Fig', 'Endive', 'Fennel'],
        center: ['Mango', 'Lemon', 'Leek', 'Guava', 'Mushroom', 'Melon'],
        right: ['Apple', 'Orange', 'Apricot', 'Avocado', 'Beetroot', 'Broccoli', 'Carrot', 'Clementine']
      },
      titles: {
        left: 'left box',
        center: 'center box',
        right: 'right box'
      },
      onChange: function onChange() {}
    };

    var _render2 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render2.container;

    var labels = container.querySelectorAll('label');
    expect(labels).toHaveLength(3);
    expect(labels[0].textContent).toBe('left box');
    expect(labels[1].textContent).toBe('center box');
    expect(labels[2].textContent).toBe('right box');
  });
  it('should be capable of send values from left to center and vice-versa', function () {
    var props = {
      options: {
        left: ['a left box value'],
        center: ['3'],
        right: ['5']
      },
      onChange: jest.fn()
    };

    var _render3 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render3.container,
        getAllByText = _render3.getAllByText;

    var _getAllByText = getAllByText('>>'),
        _getAllByText2 = _slicedToArray(_getAllByText, 1),
        leftToCenterButton = _getAllByText2[0];

    var _getAllByText3 = getAllByText('<<'),
        _getAllByText4 = _slicedToArray(_getAllByText3, 1),
        centerToLeftButton = _getAllByText4[0];

    var _container$querySelec = container.querySelectorAll('select'),
        _container$querySelec2 = _slicedToArray(_container$querySelec, 2),
        leftSelect = _container$querySelec2[0],
        centerSelect = _container$querySelec2[1];

    _react2.fireEvent.change(leftSelect, {
      target: {
        value: 'a left box value'
      }
    });

    _react2.fireEvent.click(leftToCenterButton);

    expect(Array.from(centerSelect.children).some(function (child) {
      return child.value === 'a left box value';
    })).toBeTruthy();
    expect(props.onChange).toBeCalledTimes(1);
    expect(props.onChange).toHaveBeenLastCalledWith({
      center: [{
        value: '3'
      }, {
        value: 'a left box value'
      }],
      left: [],
      right: [{
        value: '5'
      }]
    });

    _react2.fireEvent.change(centerSelect, {
      target: {
        value: '3'
      }
    });

    _react2.fireEvent.click(centerToLeftButton);

    expect(Array.from(leftSelect.children).some(function (child) {
      return child.value === '3';
    })).toBeTruthy();
    expect(props.onChange).toBeCalledTimes(2);
    expect(props.onChange).toHaveBeenLastCalledWith({
      center: [{
        value: 'a left box value'
      }],
      left: [{
        value: '3'
      }],
      right: [{
        value: '5'
      }]
    });
  });
  it('should be capable of send values from right to center and vice-versa', function () {
    var props = {
      options: {
        left: [{
          value: 'a left box value'
        }],
        center: [{
          value: '3'
        }],
        right: [{
          value: '5'
        }]
      },
      onChange: jest.fn()
    };

    var _render4 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render4.container,
        getAllByText = _render4.getAllByText;

    var _getAllByText5 = getAllByText('>>'),
        _getAllByText6 = _slicedToArray(_getAllByText5, 2),
        centerToRightButton = _getAllByText6[1];

    var _getAllByText7 = getAllByText('<<'),
        _getAllByText8 = _slicedToArray(_getAllByText7, 2),
        rightToCenterButton = _getAllByText8[1];

    var _container$querySelec3 = container.querySelectorAll('select'),
        _container$querySelec4 = _slicedToArray(_container$querySelec3, 3),
        centerSelect = _container$querySelec4[1],
        rightSelect = _container$querySelec4[2];

    _react2.fireEvent.change(rightSelect, {
      target: {
        value: '5'
      }
    });

    _react2.fireEvent.click(rightToCenterButton);

    expect(Array.from(centerSelect.children).some(function (child) {
      return child.value === '5';
    })).toBeTruthy();
    expect(props.onChange).toBeCalledTimes(1);
    expect(props.onChange).toHaveBeenLastCalledWith({
      center: [{
        value: '3'
      }, {
        value: '5'
      }],
      left: [{
        value: 'a left box value'
      }],
      right: []
    });

    _react2.fireEvent.change(centerSelect, {
      target: {
        value: '3'
      }
    });

    _react2.fireEvent.click(centerToRightButton);

    expect(Array.from(rightSelect.children).some(function (child) {
      return child.value === '3';
    })).toBeTruthy();
    expect(props.onChange).toBeCalledTimes(2);
    expect(props.onChange).toHaveBeenLastCalledWith({
      center: [{
        value: '5'
      }],
      left: [{
        value: 'a left box value'
      }],
      right: [{
        value: '3'
      }]
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,