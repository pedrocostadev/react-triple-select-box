"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('<SelectBox />', function () {
  afterEach(_react2.cleanup);
  it('should render the options', function () {
    var props = {
      options: [{
        value: '1'
      }, {
        value: '2'
      }],
      onSelect: function onSelect() {}
    };

    var _render = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render.container;

    var select = container.querySelector('select');
    expect(select.children).toHaveLength(props.options.length);
    expect(Array.from(select.children).every(function (child) {
      return props.options.map(function (_ref) {
        var value = _ref.value;
        return value;
      }).includes(child.value);
    })).toBeTruthy();
  });
  it('should render the number of lines according props', function () {
    var props = {
      numberOfLines: 60,
      options: [{
        value: '1'
      }, {
        value: '2'
      }],
      onSelect: function onSelect() {}
    };

    var _render2 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render2.container;

    var select = container.querySelector('select');
    expect(select.size).toBe(props.numberOfLines);
  });
  it('should call onSelection on options click', function () {
    var props = {
      options: [{
        value: '1'
      }, {
        value: '2'
      }, {
        value: '3'
      }],
      onSelect: jest.fn()
    };

    var _render3 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render3.container;

    var select = container.querySelector('select');

    _react2.fireEvent.change(select, {
      target: {
        value: '1'
      }
    });

    expect(props.onSelect).toBeCalledTimes(1);
    expect(props.onSelect).toHaveBeenLastCalledWith(['1']);
  });
  it('should render the label', function () {
    var props = {
      title: 'The box',
      options: [{
        value: '1'
      }, {
        value: '2'
      }, {
        value: '3'
      }],
      onSelect: function onSelect() {}
    };

    var _render4 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        getByText = _render4.getByText;

    expect(getByText('The box')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NlbGVjdEJveC9TZWxlY3RCb3gudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJpdCIsInByb3BzIiwib3B0aW9ucyIsInZhbHVlIiwib25TZWxlY3QiLCJjb250YWluZXIiLCJzZWxlY3QiLCJxdWVyeVNlbGVjdG9yIiwiZXhwZWN0IiwiY2hpbGRyZW4iLCJ0b0hhdmVMZW5ndGgiLCJsZW5ndGgiLCJBcnJheSIsImZyb20iLCJldmVyeSIsImNoaWxkIiwibWFwIiwiaW5jbHVkZXMiLCJ0b0JlVHJ1dGh5IiwibnVtYmVyT2ZMaW5lcyIsInNpemUiLCJ0b0JlIiwiamVzdCIsImZuIiwiZmlyZUV2ZW50IiwiY2hhbmdlIiwidGFyZ2V0IiwidG9CZUNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoIiwidGl0bGUiLCJnZXRCeVRleHQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFFQUEsUUFBUSxDQUFDLGVBQUQsRUFBa0IsWUFBTTtBQUU5QkMsRUFBQUEsU0FBUyxDQUFDQyxlQUFELENBQVQ7QUFFQUMsRUFBQUEsRUFBRSxDQUFDLDJCQUFELEVBQThCLFlBQU07QUFDcEMsUUFBTUMsS0FBSyxHQUFHO0FBQ1pDLE1BQUFBLE9BQU8sRUFBRSxDQUFFO0FBQUVDLFFBQUFBLEtBQUssRUFBRTtBQUFULE9BQUYsRUFBa0I7QUFBRUEsUUFBQUEsS0FBSyxFQUFFO0FBQVQsT0FBbEIsQ0FERztBQUVaQyxNQUFBQSxRQUFRLEVBQUUsb0JBQU0sQ0FBRTtBQUZOLEtBQWQ7O0FBRG9DLGtCQU1kLG9CQUFPLGdDQUFDLFlBQUQsRUFBZUgsS0FBZixDQUFQLENBTmM7QUFBQSxRQU01QkksU0FONEIsV0FNNUJBLFNBTjRCOztBQU9wQyxRQUFNQyxNQUFNLEdBQUdELFNBQVMsQ0FBQ0UsYUFBVixDQUF3QixRQUF4QixDQUFmO0FBRUFDLElBQUFB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Q0FBQyxZQUFELEVBQWVILEtBQWYsQ0FBUCxDQVBZO0FBQUEsUUFPMUI2QixTQVAwQixZQU8xQkEsU0FQMEI7O0FBUWxDdEIsSUFBQUEsTUFBTSxDQUFDc0IsU0FBUyxDQUFDLFNBQUQsQ0FBVixDQUFOLENBQTZCWixVQUE3QjtBQUNELEdBVEMsQ0FBRjtBQVdELENBdERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgY2xlYW51cCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5cbmltcG9ydCBTZWxlY3RCb3ggZnJvbSAnLi8nXG5cbmRlc2NyaWJlKCc8U2VsZWN0Qm94IC8+JywgKCkgPT4ge1xuXG4gIGFmdGVyRWFjaChjbGVhbnVwKVxuICBcbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIG9wdGlvbnMnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBvcHRpb25zOiBbIHsgdmFsdWU6ICcxJyB9LCB7IHZhbHVlOiAnMicgfSBdLFxuICAgICAgb25TZWxlY3Q6ICgpID0+IHt9XG4gICAgfVxuXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8U2VsZWN0Qm94IHsuLi5wcm9wc30gLz4pXG4gICAgY29uc3Qgc2VsZWN0ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCcpXG5cbiAgICBleHBlY3Qoc2VsZWN0LmNoaWxkcmVuKS50b0hhdmVMZW5ndGgocHJvcHMub3B0aW9ucy5sZW5ndGgpXG4gICAgZXhwZWN0KEFycmF5LmZyb20oc2VsZWN0LmNoaWxkcmVuKS5ldmVyeShjaGlsZCA9PiBwcm9wcy5vcHRpb25zLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSkuaW5jbHVkZXMoY2hpbGQudmFsdWUpKSkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIG51bWJlciBvZiBsaW5lcyBhY2NvcmRpbmcgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBudW1iZXJPZkxpbmVzOiA2MCxcbiAgICAgIG9wdGlvbnM6IFsgeyB2YWx1ZTogJzEnIH0sIHsgdmFsdWU6ICcyJyB9IF0sXG4gICAgICBvblNlbGVjdDogKCkgPT4ge31cbiAgICB9XG5cbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxTZWxlY3RCb3ggey4uLnByb3BzfSAvPilcbiAgICBjb25zdCBzZWxlY3QgPSBjb250YWluZXIucXVlcnlTZWxlY3Rvcignc2VsZWN0JylcbiAgICBleHBlY3Qoc2VsZWN0LnNpemUpLnRvQmUocHJvcHMubnVtYmVyT2ZMaW5lcylcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNhbGwgb25TZWxlY3Rpb24gb24gb3B0aW9ucyBjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIG9wdGlvbnM6IFsgeyB2YWx1ZTogJzEnIH0sIHsgdmFsdWU6ICcyJyB9LCB7IHZhbHVlOiAnMycgfSBdLFxuICAgICAgb25TZWxlY3Q6IGplc3QuZm4oKVxuICAgIH1cblxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFNlbGVjdEJveCB7Li4ucHJvcHN9IC8+KVxuICAgIGNvbnN0IHNlbGVjdCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKVxuXG4gICAgZmlyZUV2ZW50LmNoYW5nZShzZWxlY3QsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnMScgfSB9KVxuICAgIGV4cGVjdChwcm9wcy5vblNlbGVjdCkudG9CZUNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KHByb3BzLm9uU2VsZWN0KS50b0hhdmVCZWVuTGFzdENhbGxlZFdpdGgoWycxJ10pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIGxhYmVsJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgdGl0bGU6ICdUaGUgYm94JyxcbiAgICAgIG9wdGlvbnM6IFsgeyB2YWx1ZTogJzEnIH0sIHsgdmFsdWU6ICcyJyB9LCB7IHZhbHVlOiAnMycgfSBdLFxuICAgICAgb25TZWxlY3Q6ICgpID0+IHt9XG4gICAgfVxuXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8U2VsZWN0Qm94IHsuLi5wcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGhlIGJveCcpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxufSlcbiJdfQ==