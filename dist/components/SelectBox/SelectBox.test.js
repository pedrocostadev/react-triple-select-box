"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _ = _interopRequireDefault(require("./"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('<SelectBox />', function () {
  afterEach(_react2.cleanup);
  it('should render the options', function () {
    var props = {
      values: ['1', '2'],
      onSelect: function onSelect() {}
    };

    var _render = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render.container;

    var select = container.querySelector('select');
    expect(select.children).toHaveLength(props.values.length);
    expect(Array.from(select.children).every(function (child) {
      return props.values.includes(child.value);
    })).toBeTruthy();
  });
  it('should render the number of lines according props', function () {
    var props = {
      numberOfLines: 60,
      values: ['1', '2'],
      onSelect: function onSelect() {}
    };

    var _render2 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render2.container;

    var select = container.querySelector('select');
    expect(select.size).toBe(props.numberOfLines);
  });
  it('should call onSelection on options click', function () {
    var props = {
      values: ['1', '2', '3'],
      onSelect: jest.fn()
    };

    var _render3 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        container = _render3.container;

    var select = container.querySelector('select');

    _react2.fireEvent.change(select, {
      target: {
        value: '1'
      }
    });

    expect(props.onSelect).toBeCalledTimes(1);
    expect(props.onSelect).toHaveBeenLastCalledWith(['1']);
  });
  it('should render the label', function () {
    var props = {
      title: 'The box',
      values: ['1', '2', '3'],
      onSelect: function onSelect() {}
    };

    var _render4 = (0, _react2.render)(_react["default"].createElement(_["default"], props)),
        getByText = _render4.getByText;

    expect(getByText('The box')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NlbGVjdEJveC9TZWxlY3RCb3gudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFudXAiLCJpdCIsInByb3BzIiwidmFsdWVzIiwib25TZWxlY3QiLCJjb250YWluZXIiLCJzZWxlY3QiLCJxdWVyeVNlbGVjdG9yIiwiZXhwZWN0IiwiY2hpbGRyZW4iLCJ0b0hhdmVMZW5ndGgiLCJsZW5ndGgiLCJBcnJheSIsImZyb20iLCJldmVyeSIsImNoaWxkIiwiaW5jbHVkZXMiLCJ2YWx1ZSIsInRvQmVUcnV0aHkiLCJudW1iZXJPZkxpbmVzIiwic2l6ZSIsInRvQmUiLCJqZXN0IiwiZm4iLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ0b0JlQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuTGFzdENhbGxlZFdpdGgiLCJ0aXRsZSIsImdldEJ5VGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQTs7OztBQUVBQSxRQUFRLENBQUMsZUFBRCxFQUFrQixZQUFNO0FBQzlCQyxFQUFBQSxTQUFTLENBQUNDLGVBQUQsQ0FBVDtBQUVBQyxFQUFBQSxFQUFFLENBQUMsMkJBQUQsRUFBOEIsWUFBTTtBQUNwQyxRQUFNQyxLQUFLLEdBQUc7QUFDWkMsTUFBQUEsTUFBTSxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FESTtBQUVaQyxNQUFBQSxRQUFRLEVBQUUsb0JBQU0sQ0FBRTtBQUZOLEtBQWQ7O0FBRG9DLGtCQU1kLG9CQUFPLGdDQUFDLFlBQUQsRUFBZUYsS0FBZixDQUFQLENBTmM7QUFBQSxRQU01QkcsU0FONEIsV0FNNUJBLFNBTjRCOztBQU9wQyxRQUFNQyxNQUFNLEdBQUdELFNBQVMsQ0FBQ0UsYUFBVixDQUF3QixRQUF4QixDQUFmO0FBRUFDLElBQUFBLE1BQU0sQ0FBQ0YsTUFBTSxDQUFDRyxRQUFSLENBQU4sQ0FBd0JDLFlBQXhCLENBQXFDUixLQUFLLENBQUNDLE1BQU4sQ0FBYVEsTUFBbEQ7QUFDQUgsSUFBQUEsTUFBTSxDQUFDSSxLQUFLLENBQUNDLElBQU4sQ0FBV1AsTUFBTSxDQUFDRyxRQUFsQixFQUE0QkssS0FBNUIsQ0FBa0MsVUFBQUMsS0FBSztBQUFBLGFBQUliLEtBQUssQ0FBQ0MsTUFBTixDQUFhYSxRQUFiLENBQXNCRCxLQUFLLENBQUNFLEtBQTVCLENBQUo7QUFBQSxLQUF2QyxDQUFELENBQU4sQ0FBdUZDLFVBQXZGO0FBQ0QsR0FYQyxDQUFGO0FBYUFqQixFQUFBQSxFQUFFLENBQUMsbURBQUQsRUFBc0QsWUFBTTtBQUM1RCxRQUFNQyxLQUFLLEdBQUc7QUFDWmlCLE1BQUFBLGFBQWEsRUFBRSxFQURIO0FBRVpoQixNQUFBQSxNQUFNLEVBQUUsQ0FBQyxHQUFELEVBQU0sR0FBTixDQUZJO0FBR1pDLE1BQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFO0FBSE4sS0FBZDs7QUFENEQsbUJBT3RDLG9CQUFPLGdDQUFDLFlBQUQsRUFBZUYsS0FBZixDQUFQLENBUHNDO0FBQUEsUUFPcERHLFNBUG9ELFlBT3BEQSxTQVBvRDs7QUFRNUQsUUFBTUMsTUFBTSxHQUFHRCxTQUFTLENBQUNFLGFBQVYsQ0FBd0IsUUFBeEIsQ0FBZjtBQUNBQyxJQUFBQSxNQUFNLENBQUNGLE1BQU0sQ0FBQ2MsSUFBUixDQUFOLENBQW9CQyxJQUFwQixDQUF5Qm5CLEtBQUssQ0FBQ2lCLGFBQS9CO0FBQ0QsR0FWQyxDQUFGO0FBWUFsQixFQUFBQSxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtBQUNuRCxRQUFNQyxLQUFLLEdBQUc7QUFDWkMsTUFBQUEsTUFBTSxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBREk7QUFFWkMsTUFBQUEsUUFBUSxFQUFFa0IsSUFBSSxDQUFDQyxFQUFMO0FBRkUsS0FBZDs7QUFEbUQsbUJBTTdCLG9CQUFPLGdDQUFDLFlBQUQsRUFBZXJCLEtBQWYsQ0FBUCxDQU42QjtBQUFBLFFBTTNDRyxTQU4yQyxZQU0zQ0EsU0FOMkM7O0FBT25ELFFBQU1DLE1BQU0sR0FBR0QsU0FBUyxDQUFDRSxhQUFWLENBQXdCLFFBQXhCLENBQWY7O0FBRUFpQixzQkFBVUMsTUFBVixDQUFpQm5CLE1BQWpCLEVBQXlCO0FBQUVvQixNQUFBQSxNQUFNLEVBQUU7QUFBRVQsUUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBVixLQUF6Qjs7QUFDQVQsSUFBQUEsTUFBTSxDQUFDTixLQUFLLENBQUNFLFFBQVAsQ0FBTixDQUF1QnVCLGVBQXZCLENBQXVDLENBQXZDO0FBQ0FuQixJQUFBQSxNQUFNLENBQUNOLEtBQUssQ0FBQ0UsUUFBUCxDQUFOLENBQXVCd0Isd0JBQXZCLENBQWdELENBQUMsR0FBRCxDQUFoRDtBQUNELEdBWkMsQ0FBRjtBQWNBM0IsRUFBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCLFlBQU07QUFDbEMsUUFBTUMsS0FBSyxHQUFHO0FBQ1oyQixNQUFBQSxLQUFLLEVBQUUsU0FESztBQUVaMUIsTUFBQUEsTUFBTSxFQUFFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBRkk7QUFHWkMsTUFBQUEsUUFBUSxFQUFFLG9CQUFNLENBQUU7QUFITixLQUFkOztBQURrQyxtQkFPWixvQkFBTyxnQ0FBQyxZQUFELEVBQWVGLEtBQWYsQ0FBUCxDQVBZO0FBQUEsUUFPMUI0QixTQVAwQixZQU8xQkEsU0FQMEI7O0FBUWxDdEIsSUFBQUEsTUFBTSxDQUFDc0IsU0FBUyxDQUFDLFNBQUQsQ0FBVixDQUFOLENBQTZCWixVQUE3QjtBQUNELEdBVEMsQ0FBRjtBQVVELENBcERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgY2xlYW51cCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5cbmltcG9ydCBTZWxlY3RCb3ggZnJvbSAnLi8nXG5cbmRlc2NyaWJlKCc8U2VsZWN0Qm94IC8+JywgKCkgPT4ge1xuICBhZnRlckVhY2goY2xlYW51cClcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aGUgb3B0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIHZhbHVlczogWycxJywgJzInXSxcbiAgICAgIG9uU2VsZWN0OiAoKSA9PiB7fVxuICAgIH1cblxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFNlbGVjdEJveCB7Li4ucHJvcHN9IC8+KVxuICAgIGNvbnN0IHNlbGVjdCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKVxuXG4gICAgZXhwZWN0KHNlbGVjdC5jaGlsZHJlbikudG9IYXZlTGVuZ3RoKHByb3BzLnZhbHVlcy5sZW5ndGgpXG4gICAgZXhwZWN0KEFycmF5LmZyb20oc2VsZWN0LmNoaWxkcmVuKS5ldmVyeShjaGlsZCA9PiBwcm9wcy52YWx1ZXMuaW5jbHVkZXMoY2hpbGQudmFsdWUpKSkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIG51bWJlciBvZiBsaW5lcyBhY2NvcmRpbmcgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBudW1iZXJPZkxpbmVzOiA2MCxcbiAgICAgIHZhbHVlczogWycxJywgJzInXSxcbiAgICAgIG9uU2VsZWN0OiAoKSA9PiB7fVxuICAgIH1cblxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFNlbGVjdEJveCB7Li4ucHJvcHN9IC8+KVxuICAgIGNvbnN0IHNlbGVjdCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKVxuICAgIGV4cGVjdChzZWxlY3Quc2l6ZSkudG9CZShwcm9wcy5udW1iZXJPZkxpbmVzKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY2FsbCBvblNlbGVjdGlvbiBvbiBvcHRpb25zIGNsaWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgdmFsdWVzOiBbJzEnLCAnMicsICczJ10sXG4gICAgICBvblNlbGVjdDogamVzdC5mbigpXG4gICAgfVxuXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8U2VsZWN0Qm94IHsuLi5wcm9wc30gLz4pXG4gICAgY29uc3Qgc2VsZWN0ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCcpXG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlKHNlbGVjdCwgeyB0YXJnZXQ6IHsgdmFsdWU6ICcxJyB9IH0pXG4gICAgZXhwZWN0KHByb3BzLm9uU2VsZWN0KS50b0JlQ2FsbGVkVGltZXMoMSlcbiAgICBleHBlY3QocHJvcHMub25TZWxlY3QpLnRvSGF2ZUJlZW5MYXN0Q2FsbGVkV2l0aChbJzEnXSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aGUgbGFiZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICB0aXRsZTogJ1RoZSBib3gnLFxuICAgICAgdmFsdWVzOiBbJzEnLCAnMicsICczJ10sXG4gICAgICBvblNlbGVjdDogKCkgPT4ge31cbiAgICB9XG5cbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxTZWxlY3RCb3ggey4uLnByb3BzfSAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUaGUgYm94JykpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcbiJdfQ==